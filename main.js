!function(){"use strict";class e{constructor(e,t,s){this._name=e.name,this._link=e.link,this._cardSelector=s,this._handleImageClick=t}_setEventListener(){this._likeBtn.addEventListener("click",(()=>this._handleLikeBtn())),this._trashBtn.addEventListener("click",(()=>this._handleTrashBtn())),this._cardImageEL.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}_handleLikeBtn(){this._likeBtn.classList.toggle("card__like-button-active")}_handleTrashBtn(){this._cardElement.remove(),this._cardElement=null}getView(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardImageEL=this._cardElement.querySelector(".card__image"),this._cardTitleEL=this._cardElement.querySelector(".card__title"),this._likeBtn=this._cardElement.querySelector(".card__like-button"),this._trashBtn=this._cardElement.querySelector(".card__trash-button"),this._setEventListener(),this._cardImageEL.src=this._link,this._cardImageEL.alt=this._name,this._cardTitleEL.textContent=this._name,this._cardElement}}class t{constructor(e,t){this._options=e,this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formEl=t}_hideInputError(e){this._errorMessageEl=this._formEl.querySelector(`#${e.id}-error`),e.classList.remove(this._inputErrorClass),this._errorMessageEl.textContent="",this._errorMessageEl.classList.remove(this._errorClass)}_showInputError(e){this._errorMessageEl=this._formEl.querySelector(`#${e.id}-error`),e.classList.add(this._inputErrorClass),this._errorMessageEl.textContent=e.validationMessage,this._errorMessageEl.classList.add(this._errorClass)}_checkInputValitity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_hasInvalidInput(){return!this._inputEls.every((e=>e.validity.valid))}disableBtn(){this._submitBtn.classList.add(this._inactiveButtonClass),this._submitBtn.disabled=!0}_enableBtn(){this._submitBtn.classList.remove(this._inactiveButtonClass),this._submitBtn.disabled=!1}_toggleButtonState(){if(this._hasInvalidInput())return this.disableBtn();this._enableBtn()}_setEventListeners(){this._inputEls=[...this._formEl.querySelectorAll(this._inputSelector)],this._submitBtn=this._formEl.querySelector(this._submitButtonSelector),this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValitity(e),this._toggleButtonState()}))}))}enableValidation(){this._formEl.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class s{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._closeButton=this._popupElement.querySelector(".modal__close-button")}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._closeButton.addEventListener("click",(()=>this.close())),this._popupElement.addEventListener("click",(e=>{e.target===this._popupElement&&this.close()}))}}class n extends s{constructor(e){let{popupSelector:t,handleFormSubmit:s}=e;super({popupSelector:t}),this._handleFormSubmit=s,this.formElement=this._popupElement.querySelector(".modal__form"),this._inputList=Array.from(this.formElement.querySelectorAll(".modal__input")),this.setEventListeners()}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super.setEventListeners(),this.formElement.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}}const r={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},i=new class{constructor(e){let{nameSelector:t,jobSelector:s}=e;this._nameElement=document.querySelector(t),this._jobElement=document.querySelector(s)}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent}}setUserInfo(e){let{name:t,job:s}=e;this._nameElement.textContent=t,this._jobElement.textContent=s}}({nameSelector:".profile__title",jobSelector:".profile__job"}),o=document.forms["modal__profile-form"],a=document.forms["modal__card-form"],l=new t(r,o),c=new t(r,a),m=new class extends s{constructor(e){super({popupSelector:e}),this._imageElement=this._popupElement.querySelector(".modal__image"),this._captionElement=this._popupElement.querySelector(".modal__card_image-title")}open(e){this._imageElement.src=e.link,this._imageElement.alt=e.name,this._captionElement.textContent=e.name,super.open()}}("#modal_image");l.enableValidation(),c.enableValidation(),m.setEventListeners();const _=document.querySelector("#profile__edit-button"),u=document.querySelector("#profile__add-button"),d=document.querySelector(".modal__input-name"),h=document.querySelector(".modal__input-job");function p(e){m.open(e)}document.querySelector(".modal__input-title"),document.querySelector(".modal__input-url");const E=new n({popupSelector:"#modal_one",handleFormSubmit:e=>{i.setUserInfo(e),E.close(),E.formElement.reset()}}),S=new n({popupSelector:"#modal_adding-cards",handleFormSubmit:e=>{g({name:e.title,link:e.url}),c.disableBtn(),S.close(),S.formElement.reset()}});function g(t){const s=function(t){return new e(t,p,"#card-template").getView()}(t);v.addItem(s)}_.addEventListener("click",(()=>{const e=i.getUserInfo();d.value=e.name,h.value=e.job,E.open()}));const v=new class{constructor(e,t){let{items:s,renderer:n}=e;this._items=s,this._renderer=n,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({items:[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],renderer:g},".cards__list");v.renderItems(),u.addEventListener("click",(()=>S.open()))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LENBQ0VGLEtBQU0saUJBQ05FLEtBQU0sbUdDMERlOEgsU0FBVVgsR0FDakMsZ0JBRUZNLEVBQVFTLGNBR1J0QixFQUFjdkcsaUJBQWlCLFNBQVMsSUFBTTZHLEVBQWE3QyxRIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQXJvdW5kIHRoZSBVUy8uL3NyYy9jb21wb25lbnRzL0NhcmQuanMiLCJ3ZWJwYWNrOi8vQXJvdW5kIHRoZSBVUy8uL3NyYy9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vQXJvdW5kIHRoZSBVUy8uL3NyYy9jb21wb25lbnRzL1BvcHVwLmpzIiwid2VicGFjazovL0Fyb3VuZCB0aGUgVVMvLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzIiwid2VicGFjazovL0Fyb3VuZCB0aGUgVVMvLi9zcmMvdXRpbHMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL0Fyb3VuZCB0aGUgVVMvLi9zcmMvcGFnZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vQXJvdW5kIHRoZSBVUy8uL3NyYy9jb21wb25lbnRzL1VzZXJJbmZvLmpzIiwid2VicGFjazovL0Fyb3VuZCB0aGUgVVMvLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qcyIsIndlYnBhY2s6Ly9Bcm91bmQgdGhlIFVTLy4vc3JjL2NvbXBvbmVudHMvU2VjdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBDYXJkIHtcclxuICBjb25zdHJ1Y3RvcihkYXRhLCBoYW5kbGVJbWFnZUNsaWNrLCBjYXJkU2VsZWN0b3IpIHtcclxuICAgIHRoaXMuX25hbWUgPSBkYXRhLm5hbWU7XHJcbiAgICB0aGlzLl9saW5rID0gZGF0YS5saW5rO1xyXG4gICAgdGhpcy5fY2FyZFNlbGVjdG9yID0gY2FyZFNlbGVjdG9yO1xyXG4gICAgdGhpcy5faGFuZGxlSW1hZ2VDbGljayA9IGhhbmRsZUltYWdlQ2xpY2s7XHJcbiAgfVxyXG5cclxuICBfc2V0RXZlbnRMaXN0ZW5lcigpIHtcclxuICAgIC8vIExpa2UgYnV0dG9uIGNsaWNrIGhhbmRsZXJcclxuICAgIHRoaXMuX2xpa2VCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHRoaXMuX2hhbmRsZUxpa2VCdG4oKSk7XHJcblxyXG4gICAgLy8gVHJhc2ggYnV0dG9uIGNsaWNrIGhhbmRsZXJcclxuICAgIHRoaXMuX3RyYXNoQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB0aGlzLl9oYW5kbGVUcmFzaEJ0bigpKTtcclxuXHJcbiAgICAvLyBJbWFnZSBjbGljayBoYW5kbGVyXHJcbiAgICB0aGlzLl9jYXJkSW1hZ2VFTC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICB0aGlzLl9oYW5kbGVJbWFnZUNsaWNrKHsgbmFtZTogdGhpcy5fbmFtZSwgbGluazogdGhpcy5fbGluayB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgX2hhbmRsZUxpa2VCdG4oKSB7XHJcbiAgICAvLyBUb2dnbGUgbGlrZSBidXR0b24gc3RhdGVcclxuICAgIHRoaXMuX2xpa2VCdG4uY2xhc3NMaXN0LnRvZ2dsZShcImNhcmRfX2xpa2UtYnV0dG9uLWFjdGl2ZVwiKTtcclxuICB9XHJcblxyXG4gIF9oYW5kbGVUcmFzaEJ0bigpIHtcclxuICAgIC8vIFJlbW92ZSBjYXJkIGZyb20gdGhlIERPTVxyXG4gICAgdGhpcy5fY2FyZEVsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICB0aGlzLl9jYXJkRWxlbWVudCA9IG51bGw7XHJcbiAgfVxyXG5cclxuICBnZXRWaWV3KCkge1xyXG4gICAgLy8gQ2xvbmUgdGhlIGNhcmQgdGVtcGxhdGUgYW5kIHNldCB1cCBlbGVtZW50c1xyXG4gICAgdGhpcy5fY2FyZEVsZW1lbnQgPSBkb2N1bWVudFxyXG4gICAgICAucXVlcnlTZWxlY3Rvcih0aGlzLl9jYXJkU2VsZWN0b3IpXHJcbiAgICAgIC5jb250ZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZFwiKVxyXG4gICAgICAuY2xvbmVOb2RlKHRydWUpO1xyXG5cclxuICAgIHRoaXMuX2NhcmRJbWFnZUVMID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19pbWFnZVwiKTtcclxuICAgIHRoaXMuX2NhcmRUaXRsZUVMID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX190aXRsZVwiKTtcclxuICAgIHRoaXMuX2xpa2VCdG4gPSB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2xpa2UtYnV0dG9uXCIpO1xyXG4gICAgdGhpcy5fdHJhc2hCdG4gPSB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX3RyYXNoLWJ1dHRvblwiKTtcclxuXHJcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVyKCk7XHJcblxyXG4gICAgLy8gU2V0IGltYWdlIGFuZCB0aXRsZVxyXG4gICAgdGhpcy5fY2FyZEltYWdlRUwuc3JjID0gdGhpcy5fbGluaztcclxuICAgIHRoaXMuX2NhcmRJbWFnZUVMLmFsdCA9IHRoaXMuX25hbWU7XHJcbiAgICB0aGlzLl9jYXJkVGl0bGVFTC50ZXh0Q29udGVudCA9IHRoaXMuX25hbWU7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX2NhcmRFbGVtZW50O1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBGb3JtVmFsaWRhdG9yIHtcclxuICBjb25zdHJ1Y3RvcihvcHRpb25zLCBmb3JtRWwpIHtcclxuICAgIC8vIFN0b3JlIHRoZSBvcHRpb25zIGFuZCBmb3JtIGVsZW1lbnQgcmVmZXJlbmNlcy5cclxuICAgIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xyXG4gICAgdGhpcy5fZm9ybVNlbGVjdG9yID0gb3B0aW9ucy5mb3JtU2VsZWN0b3I7XHJcbiAgICB0aGlzLl9pbnB1dFNlbGVjdG9yID0gb3B0aW9ucy5pbnB1dFNlbGVjdG9yO1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3IgPSBvcHRpb25zLnN1Ym1pdEJ1dHRvblNlbGVjdG9yO1xyXG4gICAgdGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyA9IG9wdGlvbnMuaW5hY3RpdmVCdXR0b25DbGFzcztcclxuICAgIHRoaXMuX2lucHV0RXJyb3JDbGFzcyA9IG9wdGlvbnMuaW5wdXRFcnJvckNsYXNzO1xyXG4gICAgdGhpcy5fZXJyb3JDbGFzcyA9IG9wdGlvbnMuZXJyb3JDbGFzcztcclxuICAgIHRoaXMuX2Zvcm1FbCA9IGZvcm1FbDtcclxuICB9XHJcblxyXG4gIC8vIEhpZGUgdGhlIGVycm9yIG1lc3NhZ2UgYW5kIHJlbW92ZSBlcnJvciBzdHlsZXMgZnJvbSB0aGUgaW5wdXQuXHJcbiAgX2hpZGVJbnB1dEVycm9yKGlucHV0RWwpIHtcclxuICAgIHRoaXMuX2Vycm9yTWVzc2FnZUVsID0gdGhpcy5fZm9ybUVsLnF1ZXJ5U2VsZWN0b3IoYCMke2lucHV0RWwuaWR9LWVycm9yYCk7XHJcbiAgICBpbnB1dEVsLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5wdXRFcnJvckNsYXNzKTtcclxuICAgIHRoaXMuX2Vycm9yTWVzc2FnZUVsLnRleHRDb250ZW50ID0gXCJcIjtcclxuICAgIHRoaXMuX2Vycm9yTWVzc2FnZUVsLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fZXJyb3JDbGFzcyk7XHJcbiAgfVxyXG5cclxuICAvLyBTaG93IHRoZSBlcnJvciBtZXNzYWdlIGFuZCBhcHBseSBlcnJvciBzdHlsZXMgdG8gdGhlIGlucHV0LlxyXG4gIF9zaG93SW5wdXRFcnJvcihpbnB1dEVsKSB7XHJcbiAgICB0aGlzLl9lcnJvck1lc3NhZ2VFbCA9IHRoaXMuX2Zvcm1FbC5xdWVyeVNlbGVjdG9yKGAjJHtpbnB1dEVsLmlkfS1lcnJvcmApO1xyXG4gICAgaW5wdXRFbC5jbGFzc0xpc3QuYWRkKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XHJcbiAgICB0aGlzLl9lcnJvck1lc3NhZ2VFbC50ZXh0Q29udGVudCA9IGlucHV0RWwudmFsaWRhdGlvbk1lc3NhZ2U7XHJcbiAgICB0aGlzLl9lcnJvck1lc3NhZ2VFbC5jbGFzc0xpc3QuYWRkKHRoaXMuX2Vycm9yQ2xhc3MpO1xyXG4gIH1cclxuXHJcbiAgLy8gQ2hlY2sgaWYgdGhlIGlucHV0IHZhbHVlIGlzIHZhbGlkIGFuZCBzaG93IG9yIGhpZGUgZXJyb3IgbWVzc2FnZXMgYWNjb3JkaW5nbHkuXHJcbiAgX2NoZWNrSW5wdXRWYWxpdGl0eShpbnB1dEVsKSB7XHJcbiAgICBpZiAoIWlucHV0RWwudmFsaWRpdHkudmFsaWQpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX3Nob3dJbnB1dEVycm9yKGlucHV0RWwpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5faGlkZUlucHV0RXJyb3IoaW5wdXRFbCk7XHJcbiAgfVxyXG5cclxuICAvLyBDaGVjayBpZiB0aGVyZSBhcmUgYW55IGludmFsaWQgaW5wdXRzIGluIHRoZSBmb3JtLlxyXG4gIF9oYXNJbnZhbGlkSW5wdXQoKSB7XHJcbiAgICByZXR1cm4gIXRoaXMuX2lucHV0RWxzLmV2ZXJ5KChpbnB1dEVsKSA9PiBpbnB1dEVsLnZhbGlkaXR5LnZhbGlkKTtcclxuICB9XHJcblxyXG4gIC8vIERpc2FibGUgdGhlIHN1Ym1pdCBidXR0b24gYnkgYWRkaW5nIHRoZSBpbmFjdGl2ZSBjbGFzcyBhbmQgc2V0dGluZyB0aGUgZGlzYWJsZWQgcHJvcGVydHkuXHJcbiAgZGlzYWJsZUJ0bigpIHtcclxuICAgIHRoaXMuX3N1Ym1pdEJ0bi5jbGFzc0xpc3QuYWRkKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gICAgdGhpcy5fc3VibWl0QnRuLmRpc2FibGVkID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIC8vIEVuYWJsZSB0aGUgc3VibWl0IGJ1dHRvbiBieSByZW1vdmluZyB0aGUgaW5hY3RpdmUgY2xhc3MgYW5kIGNsZWFyaW5nIHRoZSBkaXNhYmxlZCBwcm9wZXJ0eS5cclxuICBfZW5hYmxlQnRuKCkge1xyXG4gICAgdGhpcy5fc3VibWl0QnRuLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbiAgICB0aGlzLl9zdWJtaXRCdG4uZGlzYWJsZWQgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIC8vIFRvZ2dsZSB0aGUgc3VibWl0IGJ1dHRvbiBzdGF0ZSBiYXNlZCBvbiB0aGUgZm9ybSdzIHZhbGlkaXR5LlxyXG4gIF90b2dnbGVCdXR0b25TdGF0ZSgpIHtcclxuICAgIGlmICh0aGlzLl9oYXNJbnZhbGlkSW5wdXQoKSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5kaXNhYmxlQnRuKCk7XHJcbiAgICB9XHJcbiAgICB0aGlzLl9lbmFibGVCdG4oKTtcclxuICB9XHJcblxyXG4gIC8vIFNldCB1cCBldmVudCBsaXN0ZW5lcnMgZm9yIHRoZSBmb3JtIGlucHV0cyB0byB2YWxpZGF0ZSBvbiB0aGUgZmx5LlxyXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX2lucHV0RWxzID0gWy4uLnRoaXMuX2Zvcm1FbC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX2lucHV0U2VsZWN0b3IpXTtcclxuICAgIHRoaXMuX3N1Ym1pdEJ0biA9IHRoaXMuX2Zvcm1FbC5xdWVyeVNlbGVjdG9yKHRoaXMuX3N1Ym1pdEJ1dHRvblNlbGVjdG9yKTtcclxuXHJcbiAgICAvLyBGb3IgZWFjaCBpbnB1dCBlbGVtZW50LCBsaXN0ZW4gZm9yIGNoYW5nZXMgYW5kIHZhbGlkYXRlIHRoZSBpbnB1dC5cclxuICAgIHRoaXMuX2lucHV0RWxzLmZvckVhY2goKGlucHV0RWwpID0+IHtcclxuICAgICAgaW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuX2NoZWNrSW5wdXRWYWxpdGl0eShpbnB1dEVsKTtcclxuICAgICAgICB0aGlzLl90b2dnbGVCdXR0b25TdGF0ZSgpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gSW5pdGlhbGl6ZSBmb3JtIHZhbGlkYXRpb24gYnkgcHJldmVudGluZyBkZWZhdWx0IGZvcm0gc3VibWlzc2lvbiBhbmQgc2V0dGluZyB1cCBsaXN0ZW5lcnMuXHJcbiAgZW5hYmxlVmFsaWRhdGlvbigpIHtcclxuICAgIHRoaXMuX2Zvcm1FbC5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChlKSA9PiB7XHJcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcih7IHBvcHVwU2VsZWN0b3IgfSkge1xyXG4gICAgdGhpcy5fcG9wdXBFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwb3B1cFNlbGVjdG9yKTtcclxuICAgIHRoaXMuX2Nsb3NlQnV0dG9uID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIFwiLm1vZGFsX19jbG9zZS1idXR0b25cIlxyXG4gICAgKTtcclxuICAgIC8vIHRoaXMuc2V0RXZlbnRMaXN0ZW5lcnMoKTsgLy8gc2V0cyB1cCB0aGUgY2xvc2UgYnV0dG9uIGxpc3RlbmVyXHJcbiAgfVxyXG5cclxuICBvcGVuKCkge1xyXG4gICAgdGhpcy5fcG9wdXBFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJtb2RhbF9vcGVuZWRcIik7XHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7XHJcbiAgfVxyXG5cclxuICBjbG9zZSgpIHtcclxuICAgIHRoaXMuX3BvcHVwRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwibW9kYWxfb3BlbmVkXCIpO1xyXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xyXG4gIH1cclxuXHJcbiAgX2hhbmRsZUVzY0Nsb3NlID0gKGV2ZW50KSA9PiB7XHJcbiAgICBpZiAoZXZlbnQua2V5ID09PSBcIkVzY2FwZVwiKSB7XHJcbiAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIC8vIENsb3NlIHBvcHVwIG9uIGNsb3NlIGJ1dHRvbiBjbGlja1xyXG4gICAgdGhpcy5fY2xvc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHRoaXMuY2xvc2UoKSk7XHJcblxyXG4gICAgLy8gQ2xvc2UgcG9wdXAgd2hlbiBjbGlja2luZyBvdXRzaWRlIHRoZSBwb3B1cCBjb250ZW50XHJcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xyXG4gICAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSB0aGlzLl9wb3B1cEVsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEZvcm0gZXh0ZW5kcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IoeyBwb3B1cFNlbGVjdG9yLCBoYW5kbGVGb3JtU3VibWl0IH0pIHtcclxuICAgIHN1cGVyKHsgcG9wdXBTZWxlY3RvciB9KTtcclxuICAgIHRoaXMuX2hhbmRsZUZvcm1TdWJtaXQgPSBoYW5kbGVGb3JtU3VibWl0O1xyXG4gICAgdGhpcy5mb3JtRWxlbWVudCA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19mb3JtXCIpO1xyXG4gICAgdGhpcy5faW5wdXRMaXN0ID0gQXJyYXkuZnJvbShcclxuICAgICAgdGhpcy5mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm1vZGFsX19pbnB1dFwiKVxyXG4gICAgKTtcclxuICAgIHRoaXMuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICB9XHJcblxyXG4gIF9nZXRJbnB1dFZhbHVlcygpIHtcclxuICAgIGNvbnN0IGlucHV0VmFsdWVzID0ge307XHJcbiAgICB0aGlzLl9pbnB1dExpc3QuZm9yRWFjaCgoaW5wdXQpID0+IHtcclxuICAgICAgaW5wdXRWYWx1ZXNbaW5wdXQubmFtZV0gPSBpbnB1dC52YWx1ZTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGlucHV0VmFsdWVzO1xyXG4gIH1cclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuICAgIHRoaXMuZm9ybUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZXZ0KSA9PiB7XHJcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0KHRoaXMuX2dldElucHV0VmFsdWVzKCkpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsIi8vIDlcclxuXHJcbmV4cG9ydCBjb25zdCBvcHRpb25zID0ge1xyXG4gIGZvcm1TZWxlY3RvcjogXCIubW9kYWxfX2Zvcm1cIixcclxuICBpbnB1dFNlbGVjdG9yOiBcIi5tb2RhbF9faW5wdXRcIixcclxuICBzdWJtaXRCdXR0b25TZWxlY3RvcjogXCIubW9kYWxfX2J1dHRvblwiLFxyXG4gIGluYWN0aXZlQnV0dG9uQ2xhc3M6IFwibW9kYWxfX2J1dHRvbl9kaXNhYmxlZFwiLFxyXG4gIGlucHV0RXJyb3JDbGFzczogXCJtb2RhbF9faW5wdXRfdHlwZV9lcnJvclwiLFxyXG4gIGVycm9yQ2xhc3M6IFwibW9kYWxfX2Vycm9yX3Zpc2libGVcIixcclxufTtcclxuXHJcbi8vIDM3XHJcblxyXG5leHBvcnQgY29uc3QgaW5pdGlhbENhcmRzID0gW1xyXG4gIHtcclxuICAgIG5hbWU6IFwiWW9zZW1pdGUgVmFsbGV5XCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QveW9zZW1pdGUuanBnXCIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiBcIkxha2UgTG91aXNlXCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvbGFrZS1sb3Vpc2UuanBnXCIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiBcIkJhbGQgTW91bnRhaW5zXCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvYmFsZC1tb3VudGFpbnMuanBnXCIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiBcIkxhdGVtYXJcIixcclxuICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC9sYXRlbWFyLmpwZ1wiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgbmFtZTogXCJWYW5vaXNlIE5hdGlvbmFsIFBhcmtcIixcclxuICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC92YW5vaXNlLmpwZ1wiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgbmFtZTogXCJMYWdvIGRpIEJyYWllc1wiLFxyXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L2xhZ28uanBnXCIsXHJcbiAgfSxcclxuXTtcclxuIiwiaW1wb3J0IENhcmQgZnJvbSBcIi4uL2NvbXBvbmVudHMvQ2FyZC5qc1wiO1xyXG5pbXBvcnQgU2VjdGlvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9TZWN0aW9uLmpzXCI7XHJcbmltcG9ydCBcIi4uL3BhZ2VzL2luZGV4LmNzc1wiO1xyXG5pbXBvcnQgRm9ybVZhbGlkYXRvciBmcm9tIFwiLi4vY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzXCI7XHJcbmltcG9ydCBQb3B1cFdpdGhJbWFnZSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qc1wiO1xyXG5pbXBvcnQgUG9wdXBXaXRoRm9ybSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzXCI7XHJcbmltcG9ydCBVc2VySW5mbyBmcm9tIFwiLi4vY29tcG9uZW50cy9Vc2VySW5mby5qc1wiO1xyXG5pbXBvcnQgeyBpbml0aWFsQ2FyZHMsIG9wdGlvbnMgfSBmcm9tIFwiLi4vdXRpbHMvY29uc3RhbnRzXCI7XHJcblxyXG4vLyBJbml0aWFsaXplIHVzZXIgaW5mb3JtYXRpb25cclxuY29uc3QgdXNlckluZm8gPSBuZXcgVXNlckluZm8oe1xyXG4gIG5hbWVTZWxlY3RvcjogXCIucHJvZmlsZV9fdGl0bGVcIixcclxuICBqb2JTZWxlY3RvcjogXCIucHJvZmlsZV9fam9iXCIsXHJcbn0pO1xyXG5cclxuLy8gRm9ybSBlbGVtZW50cyBhbmQgdmFsaWRhdG9yc1xyXG5jb25zdCBwcm9maWxlRm9ybUVsZW1lbnQgPSBkb2N1bWVudC5mb3Jtc1tcIm1vZGFsX19wcm9maWxlLWZvcm1cIl07XHJcbmNvbnN0IGNhcmRGb3JtRWxlbWVudCA9IGRvY3VtZW50LmZvcm1zW1wibW9kYWxfX2NhcmQtZm9ybVwiXTtcclxuY29uc3QgcHJvZmlsZUZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihvcHRpb25zLCBwcm9maWxlRm9ybUVsZW1lbnQpO1xyXG5jb25zdCBjYXJkRm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKG9wdGlvbnMsIGNhcmRGb3JtRWxlbWVudCk7XHJcbmNvbnN0IHBvcHVwV2l0aEltYWdlID0gbmV3IFBvcHVwV2l0aEltYWdlKFwiI21vZGFsX2ltYWdlXCIpO1xyXG5cclxuLy8gRW5hYmxlIHZhbGlkYXRpb24gZm9yIGZvcm1zXHJcbnByb2ZpbGVGb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcclxuY2FyZEZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xyXG5wb3B1cFdpdGhJbWFnZS5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuLy8gQnV0dG9ucyBmb3Igb3BlbmluZyBtb2RhbHNcclxuY29uc3QgcHJvZmlsZUVkaXRCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGVfX2VkaXQtYnV0dG9uXCIpO1xyXG5jb25zdCBhZGRDYXJkQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcm9maWxlX19hZGQtYnV0dG9uXCIpO1xyXG5cclxuLy8gUHJvZmlsZSBhbmQgY2FyZCBpbnB1dCBlbGVtZW50c1xyXG5jb25zdCBwcm9maWxlTmFtZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9faW5wdXQtbmFtZVwiKTtcclxuY29uc3QgcHJvZmlsZUpvYklucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9faW5wdXQtam9iXCIpO1xyXG5jb25zdCBjYXJkVGl0bGVJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2lucHV0LXRpdGxlXCIpO1xyXG5jb25zdCBjYXJkVXJsSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19pbnB1dC11cmxcIik7XHJcblxyXG4vLyBIYW5kbGUgaW1hZ2UgY2xpY2sgdG8gb3BlbiBwcmV2aWV3XHJcbmZ1bmN0aW9uIGhhbmRsZUltYWdlQ2xpY2soZGF0YSkge1xyXG4gIHBvcHVwV2l0aEltYWdlLm9wZW4oZGF0YSk7XHJcbn1cclxuXHJcbi8vIENyZWF0ZSBjYXJkIG9iamVjdCBmcm9tIGlucHV0IHZhbHVlc1xyXG5mdW5jdGlvbiBjcmVhdGVDYXJkT2JqZWN0KCkge1xyXG4gIHJldHVybiB7XHJcbiAgICBuYW1lOiBjYXJkVGl0bGVJbnB1dC52YWx1ZSxcclxuICAgIGxpbms6IGNhcmRVcmxJbnB1dC52YWx1ZSxcclxuICB9O1xyXG59XHJcblxyXG4vLyBQb3B1cCBmb3IgZWRpdGluZyBwcm9maWxlXHJcbmNvbnN0IHBvcHVwRWRpdFByb2ZpbGUgPSBuZXcgUG9wdXBXaXRoRm9ybSh7XHJcbiAgcG9wdXBTZWxlY3RvcjogXCIjbW9kYWxfb25lXCIsXHJcbiAgaGFuZGxlRm9ybVN1Ym1pdDogKGZvcm1EYXRhKSA9PiB7XHJcbiAgICB1c2VySW5mby5zZXRVc2VySW5mbyhmb3JtRGF0YSk7XHJcbiAgICBwb3B1cEVkaXRQcm9maWxlLmNsb3NlKCk7XHJcbiAgICBwb3B1cEVkaXRQcm9maWxlLmZvcm1FbGVtZW50LnJlc2V0KCk7XHJcbiAgfSxcclxufSk7XHJcblxyXG4vLyBQb3B1cCBmb3IgYWRkaW5nIG5ldyBjYXJkc1xyXG5jb25zdCBwb3B1cEFkZENhcmQgPSBuZXcgUG9wdXBXaXRoRm9ybSh7XHJcbiAgcG9wdXBTZWxlY3RvcjogXCIjbW9kYWxfYWRkaW5nLWNhcmRzXCIsXHJcbiAgaGFuZGxlRm9ybVN1Ym1pdDogKGZvcm1EYXRhKSA9PiB7XHJcbiAgICBjb25zdCBjYXJkRGF0YSA9IHsgbmFtZTogZm9ybURhdGEudGl0bGUsIGxpbms6IGZvcm1EYXRhLnVybCB9O1xyXG4gICAgcmVuZGVyQ2FyZChjYXJkRGF0YSk7XHJcbiAgICBjYXJkRm9ybVZhbGlkYXRvci5kaXNhYmxlQnRuKCk7XHJcbiAgICBwb3B1cEFkZENhcmQuY2xvc2UoKTtcclxuICAgIHBvcHVwQWRkQ2FyZC5mb3JtRWxlbWVudC5yZXNldCgpO1xyXG4gIH0sXHJcbn0pO1xyXG5cclxuLy8gQ3JlYXRlIGFuZCByZXR1cm4gYSBuZXcgY2FyZCBlbGVtZW50XHJcbmZ1bmN0aW9uIGNyZWF0ZUNhcmQoaXRlbSkge1xyXG4gIGNvbnN0IGNhcmRFbGVtZW50ID0gbmV3IENhcmQoaXRlbSwgaGFuZGxlSW1hZ2VDbGljaywgXCIjY2FyZC10ZW1wbGF0ZVwiKTtcclxuICByZXR1cm4gY2FyZEVsZW1lbnQuZ2V0VmlldygpO1xyXG59XHJcblxyXG4vLyBFdmVudCBsaXN0ZW5lciBmb3IgcHJvZmlsZSBlZGl0IGJ1dHRvblxyXG5wcm9maWxlRWRpdEJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gIGNvbnN0IHVzZXJEYXRhID0gdXNlckluZm8uZ2V0VXNlckluZm8oKTtcclxuICBwcm9maWxlTmFtZUlucHV0LnZhbHVlID0gdXNlckRhdGEubmFtZTtcclxuICBwcm9maWxlSm9iSW5wdXQudmFsdWUgPSB1c2VyRGF0YS5qb2I7XHJcbiAgcG9wdXBFZGl0UHJvZmlsZS5vcGVuKCk7XHJcbn0pO1xyXG5cclxuLy8gUmVuZGVyIGNhcmRzIG9uIHRoZSBwYWdlIHVzaW5nIFNlY3Rpb24gY2xhc3NcclxuZnVuY3Rpb24gcmVuZGVyQ2FyZChpdGVtKSB7XHJcbiAgY29uc3QgY2FyZCA9IGNyZWF0ZUNhcmQoaXRlbSk7XHJcbiAgc2VjdGlvbi5hZGRJdGVtKGNhcmQpO1xyXG59XHJcblxyXG4vLyBJbml0aWFsaXplIFNlY3Rpb24gY2xhc3MgdG8gbWFuYWdlIGNhcmQgcmVuZGVyaW5nXHJcbmNvbnN0IHNlY3Rpb24gPSBuZXcgU2VjdGlvbihcclxuICB7IGl0ZW1zOiBpbml0aWFsQ2FyZHMsIHJlbmRlcmVyOiByZW5kZXJDYXJkIH0sXHJcbiAgXCIuY2FyZHNfX2xpc3RcIlxyXG4pO1xyXG5zZWN0aW9uLnJlbmRlckl0ZW1zKCk7XHJcblxyXG4vLyBFdmVudCBsaXN0ZW5lciBmb3IgYWRkIGNhcmQgYnV0dG9uXHJcbmFkZENhcmRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHBvcHVwQWRkQ2FyZC5vcGVuKCkpO1xyXG4iLCIvLyBVc2VySW5mby5qc1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VySW5mbyB7XHJcbiAgY29uc3RydWN0b3IoeyBuYW1lU2VsZWN0b3IsIGpvYlNlbGVjdG9yIH0pIHtcclxuICAgIHRoaXMuX25hbWVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihuYW1lU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5fam9iRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioam9iU2VsZWN0b3IpO1xyXG4gIH1cclxuXHJcbiAgLy8gTWV0aG9kIHRvIGdldCB1c2VyIGluZm9ybWF0aW9uXHJcbiAgZ2V0VXNlckluZm8oKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBuYW1lOiB0aGlzLl9uYW1lRWxlbWVudC50ZXh0Q29udGVudCxcclxuICAgICAgam9iOiB0aGlzLl9qb2JFbGVtZW50LnRleHRDb250ZW50LFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8vIE1ldGhvZCB0byBzZXQgbmV3IHVzZXIgaW5mb3JtYXRpb25cclxuICBzZXRVc2VySW5mbyh7IG5hbWUsIGpvYiB9KSB7XHJcbiAgICB0aGlzLl9uYW1lRWxlbWVudC50ZXh0Q29udGVudCA9IG5hbWU7XHJcbiAgICB0aGlzLl9qb2JFbGVtZW50LnRleHRDb250ZW50ID0gam9iO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEltYWdlIGV4dGVuZHMgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcclxuICAgIHN1cGVyKHsgcG9wdXBTZWxlY3RvciB9KTtcclxuICAgIHRoaXMuX2ltYWdlRWxlbWVudCA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19pbWFnZVwiKTtcclxuICAgIHRoaXMuX2NhcHRpb25FbGVtZW50ID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIFwiLm1vZGFsX19jYXJkX2ltYWdlLXRpdGxlXCJcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBvcGVuKGRhdGEpIHtcclxuICAgIHRoaXMuX2ltYWdlRWxlbWVudC5zcmMgPSBkYXRhLmxpbms7XHJcbiAgICB0aGlzLl9pbWFnZUVsZW1lbnQuYWx0ID0gZGF0YS5uYW1lO1xyXG4gICAgdGhpcy5fY2FwdGlvbkVsZW1lbnQudGV4dENvbnRlbnQgPSBkYXRhLm5hbWU7XHJcbiAgICBzdXBlci5vcGVuKCk7XHJcbiAgfVxyXG59XHJcbiIsIi8vIFNlY3Rpb24uanNcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VjdGlvbiB7XHJcbiAgY29uc3RydWN0b3IoeyBpdGVtcywgcmVuZGVyZXIgfSwgY29udGFpbmVyU2VsZWN0b3IpIHtcclxuICAgIHRoaXMuX2l0ZW1zID0gaXRlbXM7IC8vIEFycmF5IG9mIGl0ZW1zIHRvIHJlbmRlclxyXG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjsgLy8gRnVuY3Rpb24gdG8gcmVuZGVyIGEgc2luZ2xlIGl0ZW1cclxuICAgIHRoaXMuX2NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29udGFpbmVyU2VsZWN0b3IpOyAvLyBDb250YWluZXIgZm9yIHRoZSBlbGVtZW50c1xyXG4gIH1cclxuXHJcbiAgLy8gTWV0aG9kIHRvIHJlbmRlciBhbGwgaXRlbXNcclxuICByZW5kZXJJdGVtcygpIHtcclxuICAgIHRoaXMuX2l0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgdGhpcy5fcmVuZGVyZXIoaXRlbSk7IC8vIENhbGwgcmVuZGVyZXIgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvLyBNZXRob2QgdG8gYWRkIGEgc2luZ2xlIERPTSBlbGVtZW50IHRvIHRoZSBjb250YWluZXJcclxuICBhZGRJdGVtKGVsZW1lbnQpIHtcclxuICAgIHRoaXMuX2NvbnRhaW5lci5wcmVwZW5kKGVsZW1lbnQpOyAvLyBBZGQgZWxlbWVudCB0byB0aGUgdG9wIG9mIHRoZSBjb250YWluZXJcclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbIkNhcmQiLCJjb25zdHJ1Y3RvciIsImRhdGEiLCJoYW5kbGVJbWFnZUNsaWNrIiwiY2FyZFNlbGVjdG9yIiwidGhpcyIsIl9uYW1lIiwibmFtZSIsIl9saW5rIiwibGluayIsIl9jYXJkU2VsZWN0b3IiLCJfaGFuZGxlSW1hZ2VDbGljayIsIl9zZXRFdmVudExpc3RlbmVyIiwiX2xpa2VCdG4iLCJhZGRFdmVudExpc3RlbmVyIiwiX2hhbmRsZUxpa2VCdG4iLCJfdHJhc2hCdG4iLCJfaGFuZGxlVHJhc2hCdG4iLCJfY2FyZEltYWdlRUwiLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJfY2FyZEVsZW1lbnQiLCJyZW1vdmUiLCJnZXRWaWV3IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY29udGVudCIsImNsb25lTm9kZSIsIl9jYXJkVGl0bGVFTCIsInNyYyIsImFsdCIsInRleHRDb250ZW50IiwiRm9ybVZhbGlkYXRvciIsIm9wdGlvbnMiLCJmb3JtRWwiLCJfb3B0aW9ucyIsIl9mb3JtU2VsZWN0b3IiLCJmb3JtU2VsZWN0b3IiLCJfaW5wdXRTZWxlY3RvciIsImlucHV0U2VsZWN0b3IiLCJfc3VibWl0QnV0dG9uU2VsZWN0b3IiLCJzdWJtaXRCdXR0b25TZWxlY3RvciIsIl9pbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiaW5hY3RpdmVCdXR0b25DbGFzcyIsIl9pbnB1dEVycm9yQ2xhc3MiLCJpbnB1dEVycm9yQ2xhc3MiLCJfZXJyb3JDbGFzcyIsImVycm9yQ2xhc3MiLCJfZm9ybUVsIiwiX2hpZGVJbnB1dEVycm9yIiwiaW5wdXRFbCIsIl9lcnJvck1lc3NhZ2VFbCIsImlkIiwiX3Nob3dJbnB1dEVycm9yIiwiYWRkIiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJfY2hlY2tJbnB1dFZhbGl0aXR5IiwidmFsaWRpdHkiLCJ2YWxpZCIsIl9oYXNJbnZhbGlkSW5wdXQiLCJfaW5wdXRFbHMiLCJldmVyeSIsImRpc2FibGVCdG4iLCJfc3VibWl0QnRuIiwiZGlzYWJsZWQiLCJfZW5hYmxlQnRuIiwiX3RvZ2dsZUJ1dHRvblN0YXRlIiwiX3NldEV2ZW50TGlzdGVuZXJzIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJlbmFibGVWYWxpZGF0aW9uIiwiZSIsInByZXZlbnREZWZhdWx0IiwiUG9wdXAiLCJfcmVmIiwicG9wdXBTZWxlY3RvciIsIl9wb3B1cEVsZW1lbnQiLCJfY2xvc2VCdXR0b24iLCJvcGVuIiwiX2hhbmRsZUVzY0Nsb3NlIiwiY2xvc2UiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJrZXkiLCJzZXRFdmVudExpc3RlbmVycyIsInRhcmdldCIsIlBvcHVwV2l0aEZvcm0iLCJoYW5kbGVGb3JtU3VibWl0Iiwic3VwZXIiLCJfaGFuZGxlRm9ybVN1Ym1pdCIsImZvcm1FbGVtZW50IiwiX2lucHV0TGlzdCIsIkFycmF5IiwiZnJvbSIsIl9nZXRJbnB1dFZhbHVlcyIsImlucHV0VmFsdWVzIiwiaW5wdXQiLCJ2YWx1ZSIsImV2dCIsInVzZXJJbmZvIiwibmFtZVNlbGVjdG9yIiwiam9iU2VsZWN0b3IiLCJfbmFtZUVsZW1lbnQiLCJfam9iRWxlbWVudCIsImdldFVzZXJJbmZvIiwiam9iIiwic2V0VXNlckluZm8iLCJfcmVmMiIsInByb2ZpbGVGb3JtRWxlbWVudCIsImZvcm1zIiwiY2FyZEZvcm1FbGVtZW50IiwicHJvZmlsZUZvcm1WYWxpZGF0b3IiLCJjYXJkRm9ybVZhbGlkYXRvciIsInBvcHVwV2l0aEltYWdlIiwiX2ltYWdlRWxlbWVudCIsIl9jYXB0aW9uRWxlbWVudCIsInByb2ZpbGVFZGl0QnRuIiwiYWRkQ2FyZEJ1dHRvbiIsInByb2ZpbGVOYW1lSW5wdXQiLCJwcm9maWxlSm9iSW5wdXQiLCJwb3B1cEVkaXRQcm9maWxlIiwiZm9ybURhdGEiLCJyZXNldCIsInBvcHVwQWRkQ2FyZCIsInJlbmRlckNhcmQiLCJ0aXRsZSIsInVybCIsIml0ZW0iLCJjYXJkIiwiY3JlYXRlQ2FyZCIsInNlY3Rpb24iLCJhZGRJdGVtIiwidXNlckRhdGEiLCJjb250YWluZXJTZWxlY3RvciIsIml0ZW1zIiwicmVuZGVyZXIiLCJfaXRlbXMiLCJfcmVuZGVyZXIiLCJfY29udGFpbmVyIiwicmVuZGVySXRlbXMiLCJlbGVtZW50IiwicHJlcGVuZCJdLCJzb3VyY2VSb290IjoiIn0=